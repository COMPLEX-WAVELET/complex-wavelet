# -*- coding: utf-8 -*-
"""dtcwt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HH0uevW8YZ6ZhZuQMMRVUQpCW-EVrFku
"""

from numpy import *
# Load the mandrill image
from PIL import Image
mandrill = Image.open('/content/IMG_20181029_133819696_BURST001 (1).jpg')
mandrill=mandrill.convert('L')
mandrill = mandrill.resize((64,64))
mandrill = asarray( mandrill )

# Show mandrill
from matplotlib.pyplot import *
figure(1)
imshow(mandrill)

!pip install dtcwt
import dtcwt

transform = dtcwt.Transform2d()

def layer(scattering_vector,image,m):
  n=len(image)
  J=int(log(n/4)/log(2))
  image_t=transform.forward(image, nlevels=J+1)
  if n>4 and m<M:
    for j in range(J):
      for theta in range(image_t.highpasses[j].shape[2]):
        scattering_vector=layer(scattering_vector,abs(image_t.highpasses[j][:,:,theta]),m+1)
    return([image_t.lowpass]+scattering_vector)
  else:
    return([image_t.lowpass]+scattering_vector)


M=2
scattering_vector=layer([],mandrill,0)
print(len(scattering_vector))

#1+6*4+6*36=241

scattering_vector=log(scattering_vector)

feature_vector=[]
for S in scattering_vector:
  for i in S:
    for j in i:
      feature_vector=feature_vector+[j]

feature_vector=np.array(feature_vector)
n=len(feature_vector)

from keras import *

model_w = Sequential()
model_w.add(layers.Dense(10, activation='linear', input_dim=n))
print(model_w.summary())

model_w.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model_w.predict(feature_vector)